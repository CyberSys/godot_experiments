[gd_scene load_steps=9 format=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="SpatialMaterial" id=2]
albedo_color = Color( 1, 0, 0, 1 )
metallic = 0.03

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
// Edge Detection with Sobel Filter

uniform float _size : hint_range(0, 100) = 10;
uniform float _threshold : hint_range(0, 50) = 10;

void fragment() {
	float size = _size /10000.0;
	float limit = _threshold / 100.0;
	
	float depth_left_up = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(-size, -size)).r;
	float depth_left = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(-size, 0)).r;
	float depth_left_down = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(-size, size)).r;
	float depth_right_up = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(size, -size)).r;
	float depth_right = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(size, 0)).r;
	float depth_right_down = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(size, size)).r;
	float depth_down = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0, -size)).r;
	float depth_up = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0, size)).r;
	float depth_diff_h = depth_left_up * -1.0 + depth_left * -2.0 + depth_left_down * -1.0 + depth_right_up + depth_right * 2.0 + depth_right_down;
	float depth_diff_v = depth_left_up * -1.0 + depth_up * -2.0 + depth_right_up * -1.0 + depth_left_down + depth_down * 2.0 + depth_right_down;
	float depth_diff = sqrt(depth_diff_h * depth_diff_h + depth_diff_v * depth_diff_v);
	
	
	if (depth_diff > limit) {
		COLOR.rgb = vec3(0.0, 0.0, 0.0);
	} else {
		COLOR.rgba = texture(SCREEN_TEXTURE, SCREEN_UV);
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/_size = 7.674
shader_param/_threshold = 0.5

[sub_resource type="CubeMesh" id=5]

[sub_resource type="Shader" id=6]
code = "shader_type spatial;

render_mode specular_schlick_ggx;

uniform vec4 Color : hint_color;
uniform float Shine = 0.2;
uniform float Roughness = 0.2;

void vertex() {
// Output:0

}

void fragment() {

	// Output:0
	ALBEDO = Color.rgb;
	ALPHA = Color.a;
	METALLIC = Shine;
	ROUGHNESS = Roughness;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/Color = Color( 0.129412, 0.980392, 1, 0.192157 )
shader_param/Shine = 0.0
shader_param/Roughness = 0.0

[sub_resource type="ViewportTexture" id=8]
viewport_path = NodePath("Viewport")

[node name="Test" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2.13732 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.948434, 0, -0.316974, 0, 1, 0, 0.316974, 0, 0.948434, -1.798, -0.041, 2.778 )
current = true
fov = 45.0

[node name="Sphere" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.198682, 0, -5.15118 )
mesh = SubResource( 1 )
material/0 = SubResource( 2 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.670588, 0.156863, 0.156863, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1920, 1080 )
msaa = 3
debug_draw = 3
render_target_v_flip = true
render_target_clear_mode = 2
render_target_update_mode = 3

[node name="Camera2" type="Camera" parent="Viewport"]
transform = Transform( 0.948434, 0, -0.316974, 0, 1, 0, 0.316974, 0, 0.948434, -1.798, -0.041, 4.91532 )
fov = 45.0

[node name="Cube" type="MeshInstance" parent="Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.0265005 )
mesh = SubResource( 5 )
material/0 = SubResource( 7 )

[node name="TextureRect" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}
